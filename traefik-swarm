version: '3.3'

services:

  traefik:
    image: traefik:latest
    ports:
      - 80:80 # Listen on port 80, default for HTTP, necessary to redirect to HTTPS
      - 443:443 # Listen on port 443, default for HTTPS
    deploy:
      placement:
        constraints:
          - node.labels.traefik-public.traefik-public-certificates == true # Make the traefik service run only on the node with this label
      labels:
        - traefik.enable=true # Enable Traefik for this service, to make it available in the public network
        - traefik.docker.network=traefik-public # Use the traefik-public network (declared below)     
        - traefik.constraint-label=traefik-public # This public Traefik will only use services with this label
        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable not set}:${HASHED_PASSWORD?Variable not set} # admin-auth middleware with HTTP Basic auth
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true # traefik-http set up only to use the middleware to redirect to https
        - traefik.http.routers.traefik-public-http.rule=Host(`${DOMAIN?Variable not set}`) # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-http.entrypoints=http # traefik-https the actual router using HTTPS
        - traefik.http.routers.traefik-public-http.middlewares=https-redirect
        - traefik.http.routers.traefik-public-https.rule=Host(`${DOMAIN?Variable not set}`) # Uses the environment variable DOMAIN
        - traefik.http.routers.traefik-public-https.entrypoints=https
        - traefik.http.routers.traefik-public-https.tls=true
        - traefik.http.routers.traefik-public-https.service=api@internal # Use the special Traefik service api@internal with the web UI/Dashboard
        - traefik.http.routers.traefik-public-https.tls.certresolver=le # Use the "le" (Let's Encrypt) resolver created below
        - traefik.http.routers.traefik-public-https.middlewares=admin-auth # Enable HTTP Basic auth, using the middleware created above
        - traefik.http.services.traefik-public.loadbalancer.server.port=8080 # Define the port inside of the Docker service to use
    volumes:
      # Add Docker as a mounted volume, so that Traefik can read the labels of other services
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Mount the volume to store the certificates
      - traefik-public-certificates:/certificates
    command:
      - --providers.docker # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`) # Add a constraint to only use services with the label "traefik.constraint-label=traefik-public"
      - --providers.docker.exposedbydefault=false # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.swarmmode # Enable Docker Swarm mode
      - --entrypoints.http.address=:80 # Create an entrypoint "http" listening on port 80
      - --entrypoints.https.address=:443 # Create an entrypoint "https" listening on port 443
      - --certificatesresolvers.le.acme.email=${EMAIL?Variable not set} # Create the certificate resolver "le" for Let's Encrypt
      - --certificatesresolvers.le.acme.storage=/certificates/acme.json # Store the Let's Encrypt certificates in the mounted volume
      - --certificatesresolvers.le.acme.tlschallenge=true # Use the TLS Challenge for Let's Encrypt
      - --accesslog # Enable the access log, with HTTP requests
      - --log # Enable the Traefik log, for configurations and errors
      - --api # Enable the Dashboard and API
    
    networks:
      - traefik-public # Use the public network created to be shared between Traefik and any other service that needs to be publicly available with HTTPS
pilot:
  token: "12d392c3-c371-404f-99fa-b3660121a33b"

volumes:
  # Create a volume to store the certificates, there is a constraint to make sure Traefik is always deployed to the same Docker node with the same volume containing the HTTPS certificates
  traefik-public-certificates: 

networks:
  # Use the previously created public network "traefik-public", shared with other services that need to be publicly available via this Traefik
  traefik-public:
    external: true
